/// <reference path="node_modules/@types/jquery/index.d.ts" />
/// <reference path="node_modules/@types/lodash/index.d.ts" />
var DEBUG = false;
var Log = (function () {
    function Log() {
    }
    Log.out = function (msg) {
        $("<pre/>").text(msg + "\n").appendTo("#log");
    };
    Log.html = function (html) {
        $("<div/>").html(html).appendTo("#log");
    };
    return Log;
}());
var PuzzleDemo = (function () {
    function PuzzleDemo(solution) {
        this.solution = [];
        this.solution = solution;
        Log.out("Puzzle:\n" + solution.join("  "));
    }
    PuzzleDemo.random = function (length) {
        return new PuzzleDemo(_.shuffle(_.map(new Array(length), function (v, k) { return k + 1; })));
    };
    PuzzleDemo.prototype.getSlotCount = function () {
        return this.solution.length;
    };
    PuzzleDemo.prototype.test = function (board) {
        var count = 0;
        for (var i = 0, len = this.solution.length; i < len; i++) {
            var correct = board.slots[i].quantity == this.solution[i];
            if (correct)
                count++;
            if (DEBUG)
                board.debugViewCorrectSlots[i] = correct;
        }
        return count;
    };
    return PuzzleDemo;
}());
var HumanPuzzleInterface = (function () {
    function HumanPuzzleInterface(slotCount) {
        this.slotCount = slotCount;
    }
    HumanPuzzleInterface.prototype.getSlotCount = function () {
        return this.slotCount;
    };
    HumanPuzzleInterface.prototype.test = function (board) {
        var answer;
        do {
            answer = parseInt(prompt("Please try:\n\n    " + board + "\n\nHow many are correct?"), 10);
        } while (isNaN(answer));
        return answer;
    };
    return HumanPuzzleInterface;
}());
var UNKNOWN = "UNKNOWN";
var NO = "NO";
var MAYBE = "MAYBE";
var YES = "YES";
var Swap = (function () {
    function Swap(a, b) {
        this.a = a;
        this.b = b;
    }
    return Swap;
}());
var Move = (function () {
    // new move based on copy of given move
    function Move(base, board, swap) {
        this.base = base;
        this.board = _.cloneDeep(board);
        if (null != swap) {
            var tmp = this.board.slots[swap.a];
            this.board.slots[swap.a] = this.board.slots[swap.b];
            this.board.slots[swap.b] = tmp;
            this.board.slots[swap.a].index = swap.a;
            this.board.slots[swap.b].index = swap.b;
            this.swap = swap;
        }
    }
    Move.prototype.render = function () {
        var s = this.num + ": ";
        for (var i = 0, len = this.board.slots.length; i < len; i++) {
            var slot = this.board.slots[i];
            var underline = (null != this.swap && (slot.quantity == this.board.slots[this.swap.a].quantity || slot.quantity == this.board.slots[this.swap.b].quantity));
            var bold = this.board.debugViewCorrectSlots[i];
            s += "" + (bold ? "<b>" : "") + (underline ? "<u>" : "") + slot.quantity + slot.deduction[0] + (underline ? "</u>" : "") + (bold ? "</b>" : "") + " ";
        }
        s += (this.num === 1 ? "FIRST" :
            " = " + this.correct + " (" + (this.delta < 0 ? this.delta : "+" + this.delta) + ") score: " + this.score());
        Log.html(s);
    };
    Move.prototype.score = function () {
        return this.correct + (this.delta * .5);
    };
    Move.prototype.getSwapA = function () {
        return this.board.slots[this.swap.a];
    };
    Move.prototype.getSwapB = function () {
        return this.board.slots[this.swap.b];
    };
    Move.prototype.hasSwapDeduction = function (a, b) {
        return this.getSwapA().deduction == a &&
            this.getSwapB().deduction == b;
    };
    Move.rankInsert = function (root, move) {
        var parent = null;
        var current = root;
        var i = 0;
        while (i++ < LOOP_BREAKER) {
            parent = current;
            if (move.score() < parent.score()) {
                current = parent.left;
                if (null == current) {
                    parent.left = move;
                    return;
                }
            }
            else {
                current = parent.right;
                if (null == current) {
                    parent.right = move;
                    return;
                }
            }
        }
    };
    // TODO: find the adjacent pair in given two moves
    // adj pair in two moves =
    // if move1 = a,b and move2 = b,c then ajc pair = a
    Move.copyMostValuableMove = function (root) {
        if (null == root)
            return null;
        var current = root;
        var mostValuable = current;
        var i = 0;
        while (i++ < LOOP_BREAKER) {
            if (mostValuable.score() < current.score()) {
                mostValuable = current;
            }
            if (current.right && current.score() < current.right.score()) {
                current = current.right;
            }
            else if (current.left && current.score() < current.left.score()) {
                current = current.left;
            }
            else {
                return mostValuable.clone();
            }
        }
    };
    Move.prototype.clone = function () {
        var move = new Move(this, this.board);
        move.num = this.num;
        move.correct = this.correct;
        move.delta = this.delta;
        return move;
    };
    Move.havePlayedBefore = function (last, candidate) {
        var current = last;
        var i = 0;
        while (null != current && i++ < LOOP_BREAKER) {
            if (Board.compare(current.board, candidate.board)) {
                //if (DEBUG) Log.out(`Rejecting board played before at move ${current.num}`);
                return true;
            }
            current = current.prev;
        }
        return false;
    };
    Move.hadDeductionAtIndex = function (last, quantity, index, deduction) {
        var current = last;
        var i = 0;
        while (null != current && i++ < LOOP_BREAKER) {
            if (current.board.slots[index].quantity == quantity &&
                current.board.slots[index].deduction == deduction) {
                //if (DEBUG) Log.out(`Rejecting index deduced ${deduction} before at move ${current.num}`);
                return true;
            }
            current = current.prev;
        }
        return false;
    };
    return Move;
}());
var Slot = (function () {
    function Slot() {
    }
    Slot.prototype.setDeduction = function (deduction) {
        if (DEBUG)
            Log.out("    " + this.quantity + " " + this.deduction[0] + " => " + deduction[0] + (deduction == YES ? " FOUND" : ""));
        this.deduction = deduction;
    };
    Slot.prototype.toString = function () {
        return this.quantity;
    };
    return Slot;
}());
var Board = (function () {
    function Board(slots) {
        this.debugViewCorrectSlots = [];
        this.slots = slots;
    }
    Board.prototype.findAll = function (fn) {
        return _.filter(this.slots, fn);
    };
    Board.prototype.findOne = function (fn) {
        return this.findAll(fn)[0];
    };
    Board.compare = function (a, b) {
        if (a.slots.length != b.slots.length)
            return false;
        for (var i = 0, len = a.slots.length; i < len; i++) {
            if (a.slots[i].quantity != b.slots[i].quantity) {
                return false;
            }
        }
        return true;
    };
    Board.prototype.render = function () {
        for (var i = 0, len = this.slots.length; i < len; i++) {
            $("td#c" + i).text(this.slots[i].quantity + " " + this.slots[i].deduction[0]);
        }
    };
    Board.prototype.toString = function () {
        return this.slots.join(" ");
    };
    return Board;
}());
var Solver = (function () {
    function Solver(puzzle) {
        this.moves = 0;
        this.puzzle = puzzle;
        // begin with opening move
        this.rootMove = new Move(null, new Board(_.map(new Array(this.puzzle.getSlotCount()), function (nil, i) {
            var slot = new Slot();
            slot.index = i;
            slot.quantity = i + 1;
            slot.deduction = UNKNOWN;
            return slot;
        })));
        this.playMove(this.rootMove);
    }
    Solver.prototype.playMove = function (move) {
        // sequence move into play
        move.num = ++this.moves;
        move.prev = this.lastMove;
        this.lastMove = move;
        // test and score the move
        debugger;
        move.correct = this.puzzle.test(move.board);
        move.delta = move.correct - (null != move.base ? move.base.correct || 0 : 0);
        if (this.moves > MAX_GUESSES) {
            Log.out("Too many guesses; we lose.");
            return;
        }
        if (null != move.swap) {
            // apply swap deductions
            if (move.delta == 0) {
                // no difference; both must be NO
                move.getSwapA().setDeduction(NO);
                move.getSwapB().setDeduction(NO);
            }
            else if (move.delta == 1) {
                // difference; one is now right, but we don't know which
                move.getSwapA().setDeduction(MAYBE);
                move.getSwapB().setDeduction(MAYBE);
            }
            else if (move.delta == 2) {
                // very positive difference; both are now right for sure
                move.getSwapA().setDeduction(YES);
                move.getSwapB().setDeduction(YES);
            }
            else if (move.delta == -1) {
                // difference; one was right, but we don't know which
                move.getSwapA().setDeduction(MAYBE);
                move.getSwapB().setDeduction(MAYBE);
            }
            else if (move.delta == -2) {
                // difference; both were right for sure
                move.getSwapA().setDeduction(YES);
                move.getSwapB().setDeduction(YES);
            }
        }
        if (this.rootMove != move) {
            Move.rankInsert(this.rootMove, move);
        }
        // update user view
        move.board.render();
        move.render();
        if (move.correct == this.puzzle.getSlotCount()) {
            Log.out("You win in " + this.moves + " moves.");
            return;
        }
        this.decide();
    };
    Solver.prototype.decide = function () {
        var _this = this;
        // decide what to do next
        var nextMove;
        if (1 === this.moves) {
            // just play a swap of the first two positions
            nextMove = new Move(this.lastMove, this.lastMove.board, new Swap(0, 1));
        }
        else {
            var move = Move.copyMostValuableMove(this.rootMove);
            // try a unique new swap from non-yes deductions
            var tries = 0;
            do {
                //				// if the previous swap was M,M or N,N
                //				if (
                //					(move.hasSwapDeduction(MAYBE, MAYBE) ||
                //						move.hasSwapDeduction(NO, NO))
                //				) {
                //					// it should reuse A from the previous move
                //					// unless that resulted in a no change or unexpected gain
                //					// in which case it should now reuse B from two moves ago
                //				}
                //				else {
                //					// rotate through untested swaps remaining
                //
                //				}
                nextMove = new Move(move, move.board, new Swap(Math.floor(Math.random() * move.board.slots.length), Math.floor(Math.random() * move.board.slots.length)));
            } while ((Move.havePlayedBefore(this.lastMove, nextMove) ||
                YES == nextMove.getSwapA().deduction ||
                YES == nextMove.getSwapB().deduction ||
                Move.hadDeductionAtIndex(this.lastMove, nextMove.getSwapA().quantity, nextMove.getSwapA().index, NO) ||
                Move.hadDeductionAtIndex(this.lastMove, nextMove.getSwapB().quantity, nextMove.getSwapB().index, NO)) && tries++ < 100);
        }
        if (null == nextMove) {
            Log.out("Unable to find next move.");
            return;
        }
        setTimeout(function () { return _this.playMove(nextMove); }, GUESS_DELAY);
    };
    return Solver;
}());
var LOOP_BREAKER = 999;
var GUESS_DELAY = 50; // ms
var MAX_GUESSES = 20;
var SLOT_COUNT = 6;
var puzzle;
if (DEBUG) {
    puzzle = PuzzleDemo.random(SLOT_COUNT);
    //puzzle = new PuzzleDemo([2, 3, 4, 1, 6, 5]);
    //puzzle = new PuzzleDemo([2, 4, 6, 1, 5, 3]);
    //puzzle = new PuzzleDemo([2, 1, 5, 6, 3, 4]);
    // TODO: try a puzzle where numbers can repeat
}
else {
    puzzle = new HumanPuzzleInterface(SLOT_COUNT);
}
new Solver(puzzle);
//# sourceMappingURL=data:application/json;base64,