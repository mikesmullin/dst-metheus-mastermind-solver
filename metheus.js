/// <reference path="node_modules/@types/jquery/index.d.ts" />
/// <reference path="node_modules/@types/lodash/index.d.ts" />
var Log = (function () {
    function Log() {
    }
    Log.out = function (msg) {
        this.state += msg + "\n";
        $("#pre").text(this.state);
    };
    return Log;
}());
Log.state = "";
var PuzzleDemo = (function () {
    function PuzzleDemo(solution) {
        this.solution = [];
        this.solution = solution;
        Log.out("Puzzle: " + solution.join(", "));
    }
    PuzzleDemo.random = function (length) {
        return new PuzzleDemo(_.shuffle(_.map(new Array(length), function (v, k) { return k + 1; })));
    };
    PuzzleDemo.prototype.getSlotCount = function () {
        return this.solution.length;
    };
    PuzzleDemo.prototype.test = function (board) {
        var correct = 0;
        for (var i = 0, len = this.solution.length; i < len; i++) {
            if (board.getSlot(i).quantity == this.solution[i]) {
                correct++;
            }
        }
        return correct;
    };
    return PuzzleDemo;
}());
var HumanPuzzleInterface = (function () {
    function HumanPuzzleInterface(slotCount) {
        this.slotCount;
    }
    HumanPuzzleInterface.prototype.getSlotCount = function () {
        return this.slotCount;
    };
    HumanPuzzleInterface.prototype.test = function (board) {
        var answer;
        do {
            answer = parseInt(prompt("Please try:\n\t" + board + "\n\nHow many are correct?"), 10);
        } while (!isNaN(answer));
        return answer;
    };
    return HumanPuzzleInterface;
}());
var Solver = (function () {
    function Solver(puzzle) {
        this.guesses = 0;
        this.puzzle = puzzle;
        // first guess
        this.board = new Board(_.map(new Array(this.puzzle.getSlotCount()), function (v, k) { return k + 1; }));
        // begin
        this.testGuess();
    }
    Solver.solve = function (puzzle) {
        return new Solver(puzzle);
    };
    Solver.prototype.testGuess = function () {
        var _this = this;
        this.guesses++;
        var correct = this.puzzle.test(this.board);
        Log.out("Guess [" + this.guesses + "]: " + this.board);
        this.board.render();
        Log.out("Number correct: " + correct + " (" + (correct - this.lastCorrect) + ")");
        if (correct == this.puzzle.getSlotCount()) {
            Log.out("You win in !" + this.guesses + " guesses.");
            return;
        }
        // try again
        if (null != this.board.getMove(-1)) {
            if (correct == this.lastCorrect) {
                // no difference; both are wrong
                this.board.setDeduction("NO", "NO");
            }
            else if (correct == this.lastCorrect + 1) {
                // difference; one is now right, but we don't know which
                // unless we have history to narrow it, then we have specific match
                this.board.setDeduction("MAYBE", "MAYBE");
            }
            else if (correct == this.lastCorrect + 2) {
                // very positive difference; both are now right for sure
                this.board.setDeduction("YES", "YES");
            }
            else if (correct == this.lastCorrect - 1) {
                // difference; one was right, but we don't know which
                // if one was a maybe and one was not, then one is now a for sure
                this.board.unswap();
                this.board.setDeduction("MAYBE", "MAYBE");
            }
            else if (correct == this.lastCorrect - 2) {
                // difference; both were right for sure
                debugger;
                this.board.unswap();
                this.board.setDeduction("NO", "NO");
            }
        }
        // swap next pair
        var candidates = [];
        console.log('--');
        for (var i = 0, len = this.puzzle.getSlotCount(); i < len; i++) {
            console.log("candidate ", { i: i, d: this.board.getSlot(i).deduction });
            if ("YES" != this.board.getSlot(i).deduction) {
                console.log("push");
                candidates.push(i);
            }
        }
        if (candidates.length < 2) {
            Log.out("Only one unknown remains yet puzzle isn't solved? Impossible!");
            console.log(candidates);
            return;
        }
        candidates = _.shuffle(candidates);
        this.board.swap(candidates.pop(), candidates.pop());
        this.lastCorrect = correct;
        setTimeout(function () { return _this.testGuess(); }, GUESS_DELAY);
    };
    return Solver;
}());
var Slot = (function () {
    function Slot() {
    }
    Slot.prototype.toString = function () {
        return this.quantity;
    };
    return Slot;
}());
var Pair = (function () {
    function Pair() {
    }
    return Pair;
}());
var Move = (function () {
    function Move() {
    }
    return Move;
}());
var Board = (function () {
    function Board(quantities) {
        this.board = [];
        this.history = []; // history of moves
        for (var i = 0, len = quantities.length; i < len; i++) {
            var slot = new Slot();
            slot.index = i;
            slot.symbol = Board.symbols.substr(i, 1);
            slot.quantity = quantities[i];
            slot.deduction = "UNKNOWN";
            this.board.push(slot);
        }
    }
    Board.prototype.swap = function (a, b) {
        // record before
        var move = new Move();
        var pairBefore = new Pair();
        pairBefore.a = _.clone(this.board[a]);
        pairBefore.b = _.clone(this.board[b]);
        move.before = pairBefore;
        // move
        var c = this.board[a];
        this.board[a] = this.board[b];
        this.board[b] = c;
        // record after
        var pairAfter = new Pair();
        pairAfter.a = _.clone(this.board[a]);
        pairAfter.b = _.clone(this.board[b]);
        move.after = pairAfter;
        this.history.push(move);
    };
    Board.prototype.setDeduction = function (a, b) {
        var lastPair = this.history[this.history.length - 1].after;
        Log.out(lastPair.a.quantity + " " + lastPair.a.deduction[0] + " => " + a[0] + ", " + lastPair.b.quantity + " " + lastPair.b.deduction[0] + " => " + b[0]);
        lastPair.a.deduction = this.board[lastPair.a.index].deduction = a;
        lastPair.b.deduction = this.board[lastPair.b.index].deduction = b;
    };
    Board.prototype.unswap = function () {
        var lastPair = this.history[this.history.length - 1].after;
        this.swap(lastPair.a.index, lastPair.b.index);
    };
    Board.prototype.toString = function () {
        return this.board.join(", ");
    };
    Board.prototype.getMove = function (delta) {
        return this.history[this.history.length + delta];
    };
    Board.prototype.getSlot = function (index) {
        return this.board[index];
    };
    Board.prototype.render = function () {
        for (var i = 0, len = this.board.length; i < len; i++) {
            var slot = this.getSlot(i);
            $("td#c" + i).text(slot.quantity + " " + slot.deduction[0]);
        }
    };
    return Board;
}());
Board.symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var GUESS_DELAY = 250; // ms
var SLOT_COUNT = 6;
var puzzle = PuzzleDemo.random(SLOT_COUNT);
//let human = new HumanPuzzleInterface(SLOT_COUNT);
Solver.solve(puzzle);
//# sourceMappingURL=data:application/json;base64,