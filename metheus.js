/// <reference path="node_modules/@types/jquery/index.d.ts" />
/// <reference path="node_modules/@types/lodash/index.d.ts" />
var DEBUG = true;
var Log = (function () {
    function Log() {
    }
    Log.out = function (msg) {
        $("<pre/>").text(msg + "\n").appendTo("#log");
    };
    Log.html = function (html) {
        $("<div/>").html(html).appendTo("#log");
    };
    return Log;
}());
var PuzzleDemo = (function () {
    function PuzzleDemo(solution) {
        this.solution = [];
        this.solution = solution;
        Log.out("Puzzle:\n" + solution.join("  "));
    }
    PuzzleDemo.random = function (length) {
        return new PuzzleDemo(_.shuffle(_.map(new Array(length), function (v, k) { return k + 1; })));
    };
    PuzzleDemo.prototype.getSlotCount = function () {
        return this.solution.length;
    };
    PuzzleDemo.prototype.test = function (board) {
        var count = 0;
        for (var i = 0, len = this.solution.length; i < len; i++) {
            var correct = board.slots[i].quantity == this.solution[i];
            if (correct)
                count++;
            if (DEBUG)
                board.debugViewCorrectSlots[i] = correct;
        }
        return count;
    };
    return PuzzleDemo;
}());
var HumanPuzzleInterface = (function () {
    function HumanPuzzleInterface(slotCount) {
        this.slotCount;
    }
    HumanPuzzleInterface.prototype.getSlotCount = function () {
        return this.slotCount;
    };
    HumanPuzzleInterface.prototype.test = function (board) {
        var answer;
        do {
            answer = parseInt(prompt("Please try:\n\t" + board + "\n\nHow many are correct?"), 10);
        } while (!isNaN(answer));
        return answer;
    };
    return HumanPuzzleInterface;
}());
var UNKNOWN = "UNKNOWN";
var NO = "NO";
var MAYBE = "MAYBE";
var YES = "YES";
var Move = (function () {
    // new move based on given board
    function Move(board, aIndex, bIndex) {
        if (null != aIndex && null != bIndex) {
            var oldA = _.cloneDeep(board.slots[aIndex]);
            var oldB = _.cloneDeep(board.slots[bIndex]);
            board.slots[aIndex] = oldB;
            board.slots[aIndex].index = aIndex;
            board.slots[bIndex] = oldA;
            board.slots[bIndex].index = bIndex;
        }
        move.board = _.cloneDeep(board);
        if (null != aIndex && null != bIndex) {
            move.pair = new Pair();
            move.pair.a = _.cloneDeep(board.slots[aIndex]);
            move.pair.b = _.cloneDeep(board.slots[bIndex]);
        }
        return move;
    }
    Move.prototype.render = function () {
        var s = "";
        for (var i = 0, len = this.board.slots.length; i < len; i++) {
            var slot = this.board.slots[i];
            var underline = (null != this.pair && (slot.quantity == this.pair.a.quantity || slot.quantity == this.pair.b.quantity));
            var bold = this.board.debugViewCorrectSlots[i];
            s += "" + (bold ? "<b>" : "") + (underline ? "<u>" : "") + slot.quantity + slot.deduction[0] + (underline ? "</u>" : "") + (bold ? "</b>" : "") + " ";
        }
        s += " = " + this.correct + " (" + (this.delta < 0 ? this.delta : "+" + this.delta) + ")";
        Log.html(s);
    };
    return Move;
}());
var Slot = (function () {
    function Slot() {
    }
    Slot.prototype.setDeduction = function (deduction) {
        this.deduction = deduction;
        Log.out("          " + this.quantity + " " + this.deduction[0] + " => " + deduction[0] + (deduction == YES ? " FOUND" : ""));
    };
    Slot.prototype.toString = function () {
        return this.quantity;
    };
    return Slot;
}());
var Pair = (function () {
    function Pair() {
    }
    Pair.prototype.matchesDeductions = function (a, b) {
        return this.a.deduction == a && this.b.deduction == b;
    };
    return Pair;
}());
var Board = (function () {
    function Board(slots) {
        this.debugViewCorrectSlots = [];
        this.slots = slots;
    }
    Board.prototype.findAll = function (fn) {
        return _.filter(this.slots, fn);
    };
    Board.prototype.findOne = function (fn) {
        return this.findAll(fn)[0];
    };
    // find the adjacent pair in given two moves
    // adj pair in two moves =
    // if move1 = a,b and move2 = b,c then ajc pair = a
    Board.prototype.setDeduction = function () {
    };
    Board.prototype.render = function () {
        for (var i = 0, len = this.slots.length; i < len; i++) {
            $("td#c" + i).text(this.slots[i].quantity + " " + this.slots[i].deduction[0]);
        }
    };
    Board.prototype.toString = function () {
        return this.slots.join(" ");
    };
    return Board;
}());
var Solver = (function () {
    function Solver(puzzle) {
        this.moves = 0;
        this.puzzle = puzzle;
        // play opening move
        this.playMove(this.newMove(new Board(_.map(new Array(this.puzzle.getSlotCount()), function (nil, i) {
            var slot = new Slot();
            slot.index = i;
            slot.quantity = i + 1;
            slot.deduction = UNKNOWN;
            return slot;
        }))));
    }
    Solver.prototype.playMove = function (move) {
        var _this = this;
        // sequence move into play
        move.num = ++this.moves;
        move.prev = this.lastMove;
        this.lastMove = move;
        if (this.moves > MAX_GUESSES) {
            Log.out("Too many guesses; we lose.");
            return;
        }
        {
            var correct = this.puzzle.test(this.lastMove.board);
            var delta = correct - (null != this.lastMove ? this.lastMove.correct || 0 : 0);
            this.lastMove.board.render();
            this.lastMove.correct = correct;
            this.lastMove.delta = delta;
            this.lastMove.render();
            if (correct == this.puzzle.getSlotCount()) {
                Log.out("You win in " + this.moves + " moves.");
                return;
            }
        }
        // try again
        if (null != this.lastMove.pair) {
            if (this.lastMove.delta == 0) {
                // no difference; both must be NO?
                this.lastMove.pair.a.setDeduction(NO);
                this.lastMove.pair.b.setDeduction(NO);
            }
            else if (this.lastMove.delta == 1) {
                // difference; one is now right, but we don't know which
                // unless we have history to narrow it, then we have specific match
                this.lastMove.pair.a.setDeduction(MAYBE);
                this.lastMove.pair.b.setDeduction(MAYBE);
            }
            else if (this.lastMove.delta == 2) {
                // very positive difference; both are now right for sure
                this.lastMove.pair.a.setDeduction(YES);
                this.lastMove.pair.b.setDeduction(YES);
            }
            else if (this.lastMove.delta == -1) {
                // difference; one was right, but we don't know which
                // so first step is always to put it back
                this.lastMove.pair.a.setDeduction(MAYBE);
                this.lastMove.pair.b.setDeduction(MAYBE);
                this.unswap();
            }
            else if (this.lastMove.delta == -2) {
                // difference; both were right for sure
                this.lastMove.pair.a.setDeduction(YES);
                this.lastMove.pair.b.setDeduction(YES);
                this.unswap();
            }
        }
        setTimeout(function () { return _this.playMove(_this.newMove(a, b)); }, GUESS_DELAY);
    };
    // determine whether a quantity has ever had a given deduction at a specific index in entire history
    Solver.prototype.hadDeductionAtIndex = function (quantity, index, deduction) {
        while (null != this.lastMove.pair) {
            var pair = this.lastMove.pair;
            if ((pair.a.quantity == quantity &&
                pair.a.deduction == deduction &&
                pair.a.index == index) ||
                (pair.b.quantity == quantity &&
                    pair.b.deduction == deduction &&
                    pair.b.index == index)) {
                Log.out(quantity + " index " + index + " deduction " + deduction[0] + " happened before at move " + this.lastMove.num);
                return true;
            }
            this.lastMove = this.lastMove.prev;
        }
        return false;
    };
    Solver.prototype.alreadyTried = function (q1, i1, q2, i2) {
        while (null != this.lastMove.pair) {
            var pair = this.lastMove.pair;
            if ((pair.a.quantity == q1 &&
                pair.a.index == i1) ||
                (pair.b.quantity == q2 &&
                    pair.b.index == i2)) {
                Log.out(q1 + ":" + i1 + "," + q2 + ":" + i2 + " happened before at move " + this.lastMove.num);
                return true;
            }
            this.lastMove = this.lastMove.prev;
        }
        return false;
    };
    Solver.prototype.unswap = function () {
        var move = this.newMove(this.lastMove.board, this.lastMove.pair.a.index, this.lastMove.pair.b.index);
        // assume result is same as before
        move.correct = this.lastMove.correct;
        move.delta = this.lastMove.delta * -1; // assume opposite
    };
    return Solver;
}());
var GUESS_DELAY = 50; // ms
var MAX_GUESSES = 99;
var SLOT_COUNT = 6;
var puzzle;
if (DEBUG) {
    //puzzle = PuzzleDemo.random(SLOT_COUNT);
    puzzle = new PuzzleDemo([2, 3, 4, 1, 6, 5]);
    //puzzle = new PuzzleDemo([2, 4, 6, 1, 5, 3]);
    //puzzle = new PuzzleDemo([2, 1, 5, 6, 3, 4]);
    // TODO: try a puzzle where numbers can repeat
}
else {
    puzzle = new HumanPuzzleInterface(SLOT_COUNT);
}
new Solver(puzzle);
//# sourceMappingURL=data:application/json;base64,