/// <reference path="node_modules/@types/jquery/index.d.ts" />
/// <reference path="node_modules/@types/lodash/index.d.ts" />
var Log = (function () {
    function Log() {
    }
    Log.out = function (msg) {
        this.state += msg + "\n";
        $("#pre").text(this.state);
    };
    return Log;
}());
Log.state = "";
var PuzzleDemo = (function () {
    function PuzzleDemo(solution) {
        this.solution = [];
        this.solution = solution;
        Log.out("Puzzle: " + solution.join(" "));
    }
    PuzzleDemo.random = function (length) {
        return new PuzzleDemo(_.shuffle(_.map(new Array(length), function (v, k) { return k + 1; })));
    };
    PuzzleDemo.prototype.getSlotCount = function () {
        return this.solution.length;
    };
    PuzzleDemo.prototype.test = function (board) {
        var correct = 0;
        for (var i = 0, len = this.solution.length; i < len; i++) {
            if (board.getSlot(i).quantity == this.solution[i]) {
                correct++;
            }
        }
        return correct;
    };
    return PuzzleDemo;
}());
var HumanPuzzleInterface = (function () {
    function HumanPuzzleInterface(slotCount) {
        this.slotCount;
    }
    HumanPuzzleInterface.prototype.getSlotCount = function () {
        return this.slotCount;
    };
    HumanPuzzleInterface.prototype.test = function (board) {
        var answer;
        do {
            answer = parseInt(prompt("Please try:\n\t" + board + "\n\nHow many are correct?"), 10);
        } while (!isNaN(answer));
        return answer;
    };
    return HumanPuzzleInterface;
}());
var Solver = (function () {
    function Solver(puzzle) {
        this.guesses = 0;
        this.puzzle = puzzle;
        // first guess
        this.board = new Board(_.map(new Array(this.puzzle.getSlotCount()), function (v, k) { return k + 1; }));
        // begin
        this.testGuess();
    }
    Solver.solve = function (puzzle) {
        return new Solver(puzzle);
    };
    Solver.prototype.testGuess = function () {
        var _this = this;
        this.guesses++;
        var correct = this.puzzle.test(this.board);
        var delta = correct - this.lastCorrect || 0;
        Log.out(correct + " (" + (delta < 0 ? delta : "+" + delta) + ")  " + this.board);
        this.board.render();
        if (correct == this.puzzle.getSlotCount()) {
            Log.out("You win in " + this.guesses + " guesses.");
            return;
        }
        var twoMaybes = false;
        // try again
        var previous = this.board.getMove(-1);
        if (null != previous) {
            if (delta == 0) {
                // no difference; both are wrong
                this.board.setDeduction("NO", "NO");
                // TRICKY: if previous swap was MAYBE, MAYBE deduce remaining MAYBE => YES
                this.board.setRemainderDeduction("MAYBE", "MAYBE", "YES");
            }
            else if (delta == 1) {
                // if either of these MAYBEs has ever been NO before, then the other is YES now
                if (this.board.hadDeductionAtIndex(previous.after.a, "NO")) {
                    this.board.getSlot(previous.after.a.index).setDeduction("YES");
                    this.board.getSlot(previous.after.b.index).setDeduction("NO");
                }
                else if (this.board.hadDeductionAtIndex(previous.after.b, "NO")) {
                    this.board.getSlot(previous.after.b.index).setDeduction("YES");
                    this.board.getSlot(previous.after.a.index).setDeduction("NO");
                }
                else {
                    // difference; one is now right, but we don't know which
                    // unless we have history to narrow it, then we have specific match
                    this.board.setDeduction("MAYBE", "MAYBE");
                    twoMaybes = true;
                }
            }
            else if (delta == 2) {
                // very positive difference; both are now right for sure
                this.board.setDeduction("YES", "YES");
                // if last two were also maybes, then the third is YES
            }
            else if (delta == -1) {
                // difference; one was right, but we don't know which
                // TRICKY: if swap MAYBE, NO = -1 then REVERSE and deduce MAYBE => YES
                // if previously MAYBE, MAYBE, but now -1, then a is YES
                if (previous.after.a.deduction == "MAYBE" && previous.after.b.deduction == "MAYBE") {
                    this.board.getSlot(previous.after.a.index);
                }
                this.board.unswap();
                correct = this.lastCorrect;
                this.board.setDeduction("MAYBE", "MAYBE");
                twoMaybes = true;
                this.board.setRemainderDeduction("MAYBE", "MAYBE", "YES");
            }
            else if (delta == -2) {
                // difference; both were right for sure
                this.board.unswap();
                correct = this.lastCorrect;
                this.board.setDeduction("YES", "YES");
                // if last two were also maybes, then the third is YES
            }
        }
        // swap next pair
        var candidates = [];
        var priorityCandidates = [];
        if (twoMaybes) {
            // a MAYBE, MAYBE result should always be followed by 
            // a swap containing a) one of the original maybes, and b) one new maybe
            priorityCandidates.push(this.board.getMove(-1).after.a.index);
        }
        for (var i = 0, len = this.puzzle.getSlotCount(); i < len; i++) {
            //console.log("candidate ", { i: i, d: this.board.getSlot(i).deduction });
            if ("YES" != this.board.getSlot(i).deduction && priorityCandidates[0] != i) {
                candidates.push(i);
            }
        }
        if (candidates.length < 2) {
            Log.out("Only one unknown remains yet puzzle isn't solved? Impossible!");
            console.log(candidates);
            return;
        }
        candidates = _.shuffle(candidates).concat(priorityCandidates);
        this.board.swap(candidates.pop(), candidates.pop());
        this.lastCorrect = correct;
        setTimeout(function () { return _this.testGuess(); }, GUESS_DELAY);
    };
    return Solver;
}());
var Slot = (function () {
    function Slot() {
    }
    Slot.prototype.setDeduction = function (deduction) {
        this.deduction = deduction;
        Log.out("          " + this.quantity + " " + this.deduction[0] + " => " + deduction[0]);
    };
    Slot.prototype.toString = function () {
        return this.quantity;
    };
    return Slot;
}());
var Pair = (function () {
    function Pair() {
    }
    Pair.prototype.matchesDeductions = function (a, b) {
        return this.a.deduction == a && this.b.deduction == b;
    };
    return Pair;
}());
var Move = (function () {
    function Move() {
    }
    return Move;
}());
var Board = (function () {
    function Board(quantities) {
        this.board = [];
        this.history = []; // history of moves
        for (var i = 0, len = quantities.length; i < len; i++) {
            var slot = new Slot();
            slot.index = i;
            slot.symbol = Board.symbols.substr(i, 1);
            slot.quantity = quantities[i];
            slot.deduction = "UNKNOWN";
            this.board.push(slot);
        }
    }
    Board.prototype.swap = function (a, b) {
        // record before
        var move = new Move();
        var pairBefore = new Pair();
        pairBefore.a = _.clone(this.board[a]);
        pairBefore.b = _.clone(this.board[b]);
        move.before = pairBefore;
        // move
        Log.out("          " + this.board[a].quantity + " <> " + this.board[b].quantity);
        var c = this.board[a];
        this.board[a] = this.board[b];
        this.board[b] = c;
        this.board[a].index = b;
        this.board[b].index = a;
        // record after
        var pairAfter = new Pair();
        pairAfter.a = this.board[a];
        pairAfter.b = this.board[b];
        move.after = pairAfter;
        this.history.push(move);
    };
    // determine whether a quantity has ever had a given deduction at a specific index in entire history
    Board.prototype.hadDeductionAtIndex = function (slot, deduction) {
        for (var i = 0, len = this.history.length; i < len; i++) {
            var pair = this.history[i].after;
            if ((pair.a.quantity == slot.quantity &&
                pair.a.deduction == deduction &&
                pair.a.index == slot.index) ||
                (pair.b.quantity == slot.quantity &&
                    pair.b.deduction == deduction &&
                    pair.b.index == slot.index)) {
                return true;
            }
        }
        return false;
    };
    Board.prototype.setRemainderDeduction = function (a, b, c) {
        var previous = this.getMove(-1);
        if (previous.before.matchesDeductions(a, b)) {
            var slot = this.getSlot(previous.before.a.index);
            slot.setDeduction(c);
        }
    };
    Board.prototype.setDeduction = function (a, b) {
        var lastPair = this.history[this.history.length - 1].after;
        lastPair.a.setDeduction(a);
        lastPair.b.setDeduction(b);
    };
    Board.prototype.unswap = function () {
        var lastPair = this.history[this.history.length - 1].after;
        this.swap(lastPair.a.index, lastPair.b.index);
        Log.out("        " + this);
    };
    Board.prototype.toString = function () {
        return this.board.join(" ");
    };
    Board.prototype.getMove = function (delta) {
        return this.history[this.history.length + delta];
    };
    Board.prototype.getSlot = function (index) {
        return this.board[index];
    };
    Board.prototype.render = function () {
        for (var i = 0, len = this.board.length; i < len; i++) {
            var slot = this.getSlot(i);
            $("td#c" + i).text(slot.quantity + " " + slot.deduction[0]);
        }
    };
    return Board;
}());
Board.symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var GUESS_DELAY = 250; // ms
var SLOT_COUNT = 6;
//let puzzle = PuzzleDemo.random(SLOT_COUNT);
var puzzle = new PuzzleDemo([2, 3, 4, 1, 6, 5]);
//let human = new HumanPuzzleInterface(SLOT_COUNT);
Solver.solve(puzzle);
//# sourceMappingURL=data:application/json;base64,