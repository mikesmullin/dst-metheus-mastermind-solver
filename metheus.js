/// <reference path="node_modules/@types/jquery/index.d.ts" />
/// <reference path="node_modules/@types/lodash/index.d.ts" />
var DEBUG = true;
var Log = (function () {
    function Log() {
    }
    Log.out = function (msg) {
        $("<pre/>").text(msg + "\n").appendTo("#log");
    };
    Log.html = function (html) {
        $("<div/>").html(html).appendTo("#log");
    };
    return Log;
}());
var PuzzleDemo = (function () {
    function PuzzleDemo(solution) {
        this.solution = [];
        this.solution = solution;
        Log.out("Puzzle:\n   " + solution.join(" "));
    }
    PuzzleDemo.random = function (length) {
        return new PuzzleDemo(_.shuffle(_.map(new Array(length), function (v, k) { return k + 1; })));
    };
    PuzzleDemo.prototype.getPieceCount = function () {
        return this.solution.length;
    };
    PuzzleDemo.prototype.test = function (board) {
        var count = 0;
        for (var i = 0, len = this.solution.length; i < len; i++) {
            var correct = board.pieces[i].quantity == this.solution[i];
            if (correct)
                count++;
            if (DEBUG)
                board.debugViewCorrectPieces[i] = correct;
        }
        return count;
    };
    return PuzzleDemo;
}());
var HumanPuzzleInterface = (function () {
    function HumanPuzzleInterface(pieceCount) {
        this.lastSequence = [];
        this.pieceCount = pieceCount;
    }
    HumanPuzzleInterface.prototype.getPieceCount = function () {
        return this.pieceCount;
    };
    HumanPuzzleInterface.prototype.test = function (board) {
        var _this = this;
        var answer;
        do {
            var n = _.map(board.pieces, function (s) { return s.quantity; });
            var display = _.map(n, function (d, i) { return _this.lastSequence.length > 0 && d == _this.lastSequence[i] ? d : "(" + d + ")"; });
            this.lastSequence = n;
            answer = parseInt(prompt("Please input the following sequence:\n\n    " + display.join("  ") + "\n\nAfter each player clicks their blue button\nhow many yellow lights are lit?"), 10);
        } while (isNaN(answer));
        return answer;
    };
    return HumanPuzzleInterface;
}());
var UNKNOWN = "U";
var MAYBE_NO = "MN";
var NO = "N";
var MAYBE_YES = "MY";
var YES = "Y";
var Swap = (function () {
    function Swap(a, b) {
        this.a = a;
        this.b = b;
    }
    return Swap;
}());
var Move = (function () {
    // new move based on copy of given move
    function Move(base, board, swap) {
        this.base = base;
        this.board = _.cloneDeep(board);
        if (null != swap) {
            var tmp = this.board.pieces[swap.a];
            this.board.pieces[swap.a] = this.board.pieces[swap.b];
            this.board.pieces[swap.b] = tmp;
            this.board.pieces[swap.a].index = swap.a;
            this.board.pieces[swap.b].index = swap.b;
            this.swap = swap;
        }
    }
    Move.prototype.render = function () {
        var s = this.num + ": ";
        for (var i = 0, len = this.board.pieces.length; i < len; i++) {
            var piece = this.board.pieces[i];
            var underline = (null != this.swap && (piece.quantity == this.board.pieces[this.swap.a].quantity || piece.quantity == this.board.pieces[this.swap.b].quantity));
            var bold = this.board.debugViewCorrectPieces[i];
            s += "" + (bold ? "<b>" : "") + (underline ? "(" : "") + piece.quantity + (underline ? ")" : "") + (bold ? "</b>" : "") + " ";
        }
        s += (this.num === 1 ? "FIRST" :
            " = " + this.correct + " (" + (this.delta < 0 ? this.delta : "+" + this.delta) + ") score: " + this.score());
        Log.html(s);
    };
    Move.prototype.score = function () {
        return this.correct + (this.delta * .5);
    };
    Move.prototype.getSwapA = function () {
        return this.board.pieces[this.swap.a];
    };
    Move.prototype.getSwapB = function () {
        return this.board.pieces[this.swap.b];
    };
    Move.prototype.getSwapInBase = function (k) {
        var _this = this;
        return _.find(this.base.board.pieces, function (s) {
            return s.quantity === _this.board.pieces[_this.swap[k]].quantity;
        });
    };
    Move.prototype.hasSwapDeduction = function (a, b) {
        return this.getSwapA().deduction == a &&
            this.getSwapB().deduction == b;
    };
    // TODO: find the adjacent pair in given two moves
    // adj pair in two moves =
    // if move1 = a,b and move2 = b,c then ajc pair = a
    Move.copyMostValuableMove = function (history) {
        var mostValuable;
        for (var i = 0, len = history.length; i < len; i++) {
            var current = history[i];
            if (null == mostValuable || mostValuable.score() < current.score()) {
                mostValuable = current;
            }
        }
        return mostValuable.clone();
    };
    Move.prototype.clone = function () {
        var move = new Move(this, this.board);
        move.num = this.num;
        move.correct = this.correct;
        move.delta = this.delta;
        return move;
    };
    Move.rejectWasteMove = function (history, candidate) {
        for (var i = 0, len = history.length; i < len; i++) {
            var current = history[i];
            // reject if this board has been played before
            if (Board.compare(current.board, candidate.board)) {
                if (DEBUG)
                    Log.out("Rejecting board played before at move " + current.num + " " + candidate.board.pieces.join(" "));
                return true;
            }
        }
        for (var i = 0, len = history.length; i < len; i++) {
            var current = history[i];
            for (var i_1 = 0, len_1 = current.board.pieces.length; i_1 < len_1; i_1++) {
                var cur = current.board.pieces[i_1];
                var can = candidate.board.pieces[i_1];
                // reject if history contains a YES that isn't included here
                if (YES === cur.deduction && can.quantity !== cur.quantity) {
                    if (DEBUG)
                        Log.out("Rejecting index " + can.quantity + can.deduction.substr(0, 2) + "@" + can.index + " which was " + cur.quantity + cur.deduction.substr(0, 2) + "@" + cur.index + " before at move " + current.num);
                    return true;
                }
                // reject if history contains a NO that is included again here
                if (NO === cur.deduction && can.quantity === cur.quantity) {
                    if (DEBUG)
                        Log.out("Rejecting index " + can.quantity + can.deduction.substr(0, 2) + "@" + can.index + " which was " + cur.quantity + cur.deduction.substr(0, 2) + "@" + cur.index + " before at move " + current.num);
                    return true;
                }
            }
        }
        return false;
    };
    Move.crossJoinCandidates = function (candidates) {
        var result = [];
        for (var x = 0, xlen = candidates.length; x < xlen; x++) {
            for (var y = 0, ylen = candidates.length; y < ylen; y++) {
                if (x != y)
                    result.push(candidates[x], candidates[y]);
            }
        }
        return result;
    };
    return Move;
}());
var Piece = (function () {
    function Piece() {
    }
    Piece.prototype.setDeduction = function (deduction, board, index) {
        if (YES === this.deduction || NO === this.deduction)
            return; // hard conclusions to change
        if (DEBUG) {
            Log.out("    " + this.quantity + this.deduction.substr(0, 2) + "@" + this.index + " => " + deduction.substr(0, 2) + (deduction == YES ? " FOUND" : ""));
            if (YES === deduction && !board.debugViewCorrectPieces[index]) {
                Log.out("      but its wrong");
                debugger;
            }
        }
        this.deduction = deduction;
    };
    Piece.prototype.toString = function () {
        return "" + this.quantity + this.deduction.substr(0, 2) + "@" + this.index;
    };
    return Piece;
}());
var Board = (function () {
    function Board(pieces) {
        this.debugViewCorrectPieces = [];
        this.pieces = pieces;
    }
    Board.prototype.findAll = function (fn) {
        return _.filter(this.pieces, fn);
    };
    Board.prototype.findOne = function (fn) {
        return this.findAll(fn)[0];
    };
    Board.compare = function (a, b) {
        if (a.pieces.length != b.pieces.length)
            return false;
        for (var i = 0, len = a.pieces.length; i < len; i++) {
            if (a.pieces[i].quantity != b.pieces[i].quantity) {
                return false;
            }
        }
        return true;
    };
    Board.prototype.render = function () {
        for (var i = 0, len = this.pieces.length; i < len; i++) {
            $("td#c" + i).text(this.pieces[i].quantity + " " + this.pieces[i].deduction.substr(0, 2));
        }
    };
    Board.prototype.toString = function () {
        return this.pieces.join(" ");
    };
    return Board;
}());
var Solver = (function () {
    function Solver(puzzle) {
        var _this = this;
        this.moves = 0;
        this.puzzle = puzzle;
        // begin with opening move
        this.rootMove = new Move(null, new Board(_.map(new Array(this.puzzle.getPieceCount()), function (nil, i) {
            var piece = new Piece();
            piece.index = i;
            piece.quantity = i + 1;
            piece.deduction = UNKNOWN;
            return piece;
        })));
        _.map(this.rootMove.board.pieces, function (piece) { return _this.unknown.push(piece); });
        this.playMove(this.rootMove);
    }
    Solver.prototype.getHistory = function () {
        var current = this.lastMove;
        var history = [];
        while (null != current) {
            history.push(current);
            current = current.prev;
        }
        return history;
    };
    Solver.prototype.playMove = function (move) {
        // sequence move into play
        move.num = ++this.moves;
        move.prev = this.lastMove;
        this.lastMove = move;
        // test and score the move
        move.correct = this.puzzle.test(move.board);
        move.delta = move.correct - (null != move.base ? move.base.correct || 0 : 0);
        if (this.moves > MAX_GUESSES) {
            Log.out("Too many guesses; we lose.");
            return;
        }
        // update user view
        move.board.render();
        move.render();
        if (move.correct >= this.puzzle.getPieceCount()) {
            Log.out("You win in " + this.moves + " moves.");
            return;
        }
        if (null != move.swap) {
            // apply swap deductions
            if (move.delta == 0) {
                // no difference; both must be NO
                move.getSwapA().setDeduction(NO, move.board, move.swap.a);
                move.getSwapB().setDeduction(NO, move.board, move.swap.b);
                move.getSwapInBase("a").setDeduction(NO, move.base.board, move.swap.a);
                move.getSwapInBase("b").setDeduction(NO, move.base.board, move.swap.b);
            }
            else if (move.delta == 1) {
                // difference; one is now right, but we don't know which
                move.getSwapA().setDeduction(MAYBE_YES, move.board, move.swap.a);
                move.getSwapB().setDeduction(MAYBE_YES, move.board, move.swap.b);
                //move.getSwapInBase("a").setDeduction(MAYBE_NO, move.base.board, move.swap.a);
                //move.getSwapInBase("b").setDeduction(MAYBE_NO, move.base.board, move.swap.b);
            }
            else if (move.delta == 2) {
                // very positive difference; both are now right for sure
                move.getSwapA().setDeduction(YES, move.board, move.swap.a);
                move.getSwapB().setDeduction(YES, move.board, move.swap.b);
                move.getSwapInBase("a").setDeduction(NO, move.base.board, move.swap.a);
                move.getSwapInBase("b").setDeduction(NO, move.base.board, move.swap.b);
            }
            else if (move.delta == -1) {
                // difference; one was right, but we don't know which
                //move.getSwapA().setDeduction(MAYBE, move.board, move.swap.a);
                //move.getSwapB().setDeduction(MAYBE, move.board, move.swap.b);
                move.getSwapInBase("a").setDeduction(MAYBE_YES, move.base.board, move.swap.a);
                move.getSwapInBase("b").setDeduction(MAYBE_YES, move.base.board, move.swap.b);
            }
            else if (move.delta == -2) {
                // TODO: affect score of previous moves to re-evaluate highest score on next move
                // since we learn things about prior moves all the time
                // difference; both were right for sure
                move.getSwapA().setDeduction(NO, move.board, move.swap.a);
                move.getSwapB().setDeduction(NO, move.board, move.swap.b);
                move.getSwapInBase("a").setDeduction(YES, move.base.board, move.swap.a);
                move.getSwapInBase("b").setDeduction(YES, move.base.board, move.swap.b);
            }
        }
        this.decide();
    };
    Solver.prototype.decide = function () {
        var _this = this;
        // decide what to do next
        var nextMove;
        var candidates;
        var u, x;
        if (1 === this.moves) {
            // just play a swap of the first two positions
            nextMove = new Move(this.lastMove, this.lastMove.board, new Swap(0, 1));
        }
        else {
            var move = Move.copyMostValuableMove(this.getHistory());
            // try a unique new swap from non-yes deductions
            var tries = 0;
            var _loop_1 = function () {
                var rank = { MAYBE_YES: 1, NO: 2, UNKNOWN: 3, MAYBE_NO: 4 };
                if (null == candidates) {
                    candidates = _.filter(move.board.pieces, function (s) {
                        return _.includes([UNKNOWN, MAYBE_NO, MAYBE_YES, NO], s.deduction);
                    });
                    candidates = _.sortBy(candidates, function (s) { return rank[s.deduction]; });
                    candidates = Move.crossJoinCandidates(candidates);
                }
                else {
                    Log.out("repeated while: " + x + ", " + u);
                }
                Log.out(_.map(candidates, function (s) { return "" + s.quantity + s.deduction.substr(0, 2) + "@" + s.index; }).join(" "));
                var a = candidates.shift().index, b = candidates.shift().index;
                nextMove = new Move(move, move.board, new Swap(a, b));
            };
            do {
                _loop_1();
            } while ((x = Move.rejectWasteMove(this.getHistory(), nextMove))
                && (u = tries++) < LOOP_BREAKER);
            if (DEBUG && tries > LOOP_BREAKER)
                Log.out("candidates not original enough; exhausting retries");
            Log.out("escaped while: " + x + ", " + u);
        }
        if (null == nextMove) {
            Log.out("Unable to find next move.");
            return;
        }
        setTimeout(function () { return _this.playMove(nextMove); }, GUESS_DELAY);
    };
    return Solver;
}());
var LOOP_BREAKER = 999;
var GUESS_DELAY = 50; // ms
var MAX_GUESSES = 13;
var SLOT_COUNT = 6;
var puzzle;
if (DEBUG) {
    //puzzle = PuzzleDemo.random(SLOT_COUNT);
    puzzle = new PuzzleDemo([1, 6, 3, 5, 4, 2]);
    //puzzle = new PuzzleDemo([2, 3, 4, 1, 6, 5]);
    //puzzle = new PuzzleDemo([2, 4, 6, 1, 5, 3]);
    //puzzle = new PuzzleDemo([2, 1, 5, 6, 3, 4]);
    // TODO: try a puzzle where numbers can repeat
}
else {
    puzzle = new HumanPuzzleInterface(SLOT_COUNT);
}
new Solver(puzzle);
//# sourceMappingURL=data:application/json;base64,